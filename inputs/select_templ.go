// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package inputs

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func selectInput(p InputOpts) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<label for=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-select")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 4, Col: 30}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" class=\"tc-label\"><span>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(p.Label)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 5, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</span> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if p.Required {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<span style=\"color:red;\">*</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<div id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-select")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 9, Col: 28}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\" class=\"tc-select\" select-data=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.JSONString(p.Options))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 9, Col: 90}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if p.Multiple {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " multiple")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "><div class=\"tc-selection\"><input id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 11, Col: 20}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\" type=\"hidden\" name=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(p.Name)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 11, Col: 50}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" form=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(p.Form)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 11, Col: 66}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\" class=\"hidden-select-input\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(p.Value)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 11, Col: 112}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\" aria-hidden> <span id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-selected-items")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 12, Col: 39}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\" class=\"tc-selected-items\"></span> <button class=\"tc-dropdown-toggle\" aria-expanded=\"false\" aria-controls=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-content")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 13, Col: 94}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\"><i class=\"bx bx-chevron-down bx-md\"></i></button></div><div class=\"tc-select-content\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if p.Searchable {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<input type=\"text\" name=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-search")
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 19, Col: 47}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\" id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var13 string
			templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-search")
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 19, Col: 71}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\" placeholder=\"Search...\" class=\"tc-select-search\"> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<datalist id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-item-list")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 21, Col: 38}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\"></datalist> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if p.ShowClear {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "<button id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var15 string
			templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-clear-select")
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 23, Col: 40}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\">Clear Selection</button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</div></div></label><p id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 string
		templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-error")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/select.templ`, Line: 28, Col: 24}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "\" class=\"hidden tc-error-message\" aria-live=\"polite\"></p>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var17 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = selectScript(p.ID, p).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = selectHandle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var17), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var selectHandle = templ.NewOnceHandle()

func selectScript(id string, p InputOpts) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var18 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var18 == nil {
			templ_7745c5c3_Var18 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "<script type=\"text/javascript\" id=\"select-global-init-script\">\r\n\t\t// Helper functions (defined once globally)\r\n\t\tfunction toggleDropdown(buttonEl, forceClose = null) {\r\n\t\t\tconsole.log(\"toggleDropdown called for button:\", buttonEl.id || buttonEl.className);\r\n\t\t\tconst dropdownId = buttonEl.getAttribute('aria-controls');\r\n\t\t\tconst dropdownMenu = document.getElementById(dropdownId);\r\n\t\t\tif (!dropdownMenu) {\r\n\t\t\t\tconsole.error(\"Select Menu not found for button:\", buttonEl);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n            let willBeExpanded;\r\n            if (forceClose !== null) {\r\n                willBeExpanded = !forceClose; // If forceClose is true, willBeExpanded is false\r\n            } else {\r\n                willBeExpanded = !dropdownMenu.classList.contains('show');\r\n            }\r\n\r\n\t\t\t// Apply/remove 'show' class\r\n\t\t\tdropdownMenu.classList.toggle('show', willBeExpanded);\r\n            // Apply/remove aria-expanded attribute\r\n\t\t\tbuttonEl.setAttribute('aria-expanded', willBeExpanded);\r\n\r\n            // Update icon rotation\r\n\t\t\tconst icon = buttonEl.querySelector('i');\r\n\t\t\tif (icon) {\r\n\t\t\t\ticon.classList.toggle('bx-rotate-90', willBeExpanded);\r\n\t\t\t}\r\n\r\n            // Accessibility: Focus management when opening/closing\r\n            const listbox = dropdownMenu.querySelector('[role=\"listbox\"]');\r\n            if (willBeExpanded) {\r\n                // When opened, focus the search input if present, otherwise the listbox\r\n                if (listbox) {\r\n                    // Reset active descendant when opening\r\n                    buttonEl.removeAttribute('aria-activedescendant');\r\n                    const firstActive = listbox.querySelector('[aria-selected=\"true\"]');\r\n                    if (firstActive) {\r\n                        firstActive.focus(); // Focus the first selected item\r\n                        buttonEl.setAttribute('aria-activedescendant', firstActive.id);\r\n                    } else {\r\n                        const firstItem = listbox.querySelector('[role=\"option\"]');\r\n                        if (firstItem) {\r\n                            firstItem.focus(); // Focus the first option\r\n                            buttonEl.setAttribute('aria-activedescendant', firstItem.id);\r\n                        } else if (searchInput) {\r\n                            searchInput.focus(); // Fallback to search input\r\n                        }\r\n                    }\r\n                } else if (searchInput) {\r\n                    searchInput.focus();\r\n                }\r\n            } else {\r\n                // When closed, return focus to the toggle button\r\n                buttonEl.focus();\r\n            }\r\n\t\t}\r\n\r\n\t\tfunction setOptions(options, listId, componentId) { // Pass componentId for unique option IDs\r\n\t\t\tconst list = document.getElementById(listId);\r\n\t\t\tif (!list) {\r\n\t\t\t\tconsole.error(`List element with ID ${listId} not found.`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Set ARIA role for the list\r\n\t\t\tlist.setAttribute('role', 'listbox');\r\n            // If multiple selection is allowed, add aria-multiselectable\r\n            const isMultiple = document.getElementById(componentId + \"-select\").hasAttribute('multiple');\r\n            if (isMultiple) {\r\n                list.setAttribute('aria-multiselectable', 'true');\r\n            } else {\r\n                list.removeAttribute('aria-multiselectable');\r\n            }\r\n\r\n\t\t\toptions.sort((a, b) => {\r\n\t\t\t\treturn String(a.Label).localeCompare(String(b.Label)); // Sort by label for user-facing order\r\n\t\t\t});\r\n\r\n\t\t\tlist.innerHTML = '';\r\n\t\t\toptions.forEach((opt, index) => {\r\n\t\t\t\tlet item = document.createElement('option');\r\n\t\t\t\titem.textContent = opt.Label;\r\n\t\t\t\titem.setAttribute('value', opt.Value); // Keep value for internal logic\r\n\t\t\t\titem.classList.add('select-item');\r\n\r\n                // ARIA attributes for each option\r\n                item.setAttribute('role', 'option');\r\n                item.setAttribute('id', `${componentId}-option-${index}`); // Unique ID for aria-activedescendant\r\n                item.setAttribute('tabindex', '-1'); // Not in tab order, but focusable via JS\r\n\r\n\t\t\t\tlist.appendChild(item);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// The core initialization function for each select component\r\n\t\tfunction initializeSelectComponent(componentId, isMultiple, initialValue, placeholder, isSearchable) {\r\n\t\t\tconst selectElement = document.getElementById(componentId + \"-select\");\r\n\t\t\tif (!selectElement) {\r\n\t\t\t\tconsole.error(`Root select element with ID ${componentId}-select not found.`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst hiddenInput = document.getElementById(componentId);\r\n\t\t\tconst valueDisplay = document.getElementById(componentId + \"-selected-items\");\r\n\t\t\tconst searchInput = isSearchable ? selectElement.querySelector('#' + componentId + \"-search\") : null;\r\n\t\t\tconst listElementId = componentId + \"-item-list\";\r\n\t\t\tconst clearBtn = selectElement.querySelector('#' + componentId + \"-clear-select\");\r\n\t\t\tconst dropdownToggle = selectElement.querySelector('.tc-dropdown-toggle');\r\n\t\t\tconst labelElement = selectElement.querySelector('label[for=\"' + componentId + '-select\"]');\r\n            const dropdownMenu = document.getElementById(dropdownToggle.getAttribute('aria-controls')); // The content div\r\n\r\n            const updateValidationState = () => {\r\n                const isRequired = hiddenInput.hasAttribute('required') \r\n                console.log(hiddenInput.value)\r\n                let currentValues = []\r\n                try {\r\n                    if (isMultiple) {\r\n                        currentValues = JSON.parse(hiddenInput.value || '[]');\r\n\r\n                    } else {\r\n                        currentValues = hiddenInput.value ? [hiddenInput.value] : [];\r\n                    }\r\n                } catch (e) {\r\n                    console.error (\"Error parsing current hidden input value for validation.\", e);\r\n                    currentValues = [];\r\n                }\r\n\r\n                let isValid = true;\r\n                let errorMessage = '';\r\n\r\n                if (isRequired && currentValues.length === 0) {\r\n                    console.log('invalid')\r\n                    isValid = false;\r\n                    errorMessage = 'This field is required.'\r\n                }\r\n\r\n                // Add more complex validation here if needed, e.g., checking if 'other' is selected and 'other' input is filled.\r\n                // For value integrity, ensure selectedValues are actually in optionsData:\r\n                // const validOptionValues = new Set(optionsData.map(opt => opt.Value));\r\n                // if (currentValues.some(val => !validOptionValues.has(val))) {\r\n                //     isValid = false;\r\n                //     errorMessage = 'Invalid selection detected.';\r\n                // }\r\n\r\n                if (isValid) {\r\n                    hiddenInput.setCustomValidity(''); // Clear custom validity message\r\n                    dropdownToggle.removeAttribute('aria-invalid');\r\n                    // You might want to remove a 'has-error' class from the display\r\n                    valueDisplay.classList.remove('is-invalid');\r\n                    // Hide error message element if you have one\r\n                    const errorEl = document.getElementById(componentId + '-error');\r\n                    if (errorEl) {\r\n                        errorEl.textContent = '';\r\n                        errorEl.classList.add('hidden'); // Assuming you have a 'hidden' class\r\n                    }\r\n                } else {\r\n                    // Set custom validity message (for native browser validation UI)\r\n                    hiddenInput.setCustomValidity(errorMessage);\r\n                    dropdownToggle.setAttribute('aria-invalid', 'true');\r\n                    // Add error class to the display\r\n                    valueDisplay.classList.add('is-invalid');\r\n                    // Show error message element\r\n                    const errorEl = document.getElementById(componentId + '-error');\r\n                    if (errorEl) {\r\n                        errorEl.textContent = errorMessage;\r\n                        errorEl.classList.remove('hidden');\r\n                    }\r\n                }\r\n            }\r\n\r\n            \r\n            // ARIA setup for the toggle button\r\n            dropdownToggle.setAttribute('role', 'combobox'); // Or on a wrapper input if it exists\r\n            dropdownToggle.setAttribute('aria-haspopup', 'listbox');\r\n            // aria-expanded and aria-controls are handled by toggleDropdown\r\n\r\n\t\t\tlet selectedItems = [];\r\n\t\t\tlet selectedLabels = [];\r\n\t\t\tconst optionsData = JSON.parse(selectElement.getAttribute('select-data'));\r\n\r\n\t\t\tconst currentHiddenValue = hiddenInput.value;\r\n\t\t\tif (currentHiddenValue) {\r\n\t\t\t\tif (isMultiple) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tselectedItems = JSON.parse(currentHiddenValue);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tconsole.error(\"Error parsing initial multiple select value:\", e);\r\n\t\t\t\t\t\tselectedItems = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tselectedItems = [currentHiddenValue];\r\n\t\t\t\t}\r\n\t\t\t} else if (initialValue) {\r\n\t\t\t\tselectedItems = [initialValue];\r\n\t\t\t}\r\n\r\n\t\t\tsetOptions(optionsData, listElementId, componentId); // Pass componentId\r\n\t\t\tconst selectItems = selectElement.querySelectorAll('.tc-select-item'); // Re-query after setOptions\r\n\r\n\t\t\tselectItems.forEach(item => {\r\n\t\t\t\tconst itemValue = item.getAttribute('value');\r\n\t\t\t\tif (selectedItems.includes(itemValue)) {\r\n\t\t\t\t\titem.classList.add('active');\r\n\t\t\t\t\titem.setAttribute('aria-selected', 'true'); // Set aria-selected for selected items\r\n\t\t\t\t\tif (!selectedLabels.includes(item.textContent)) {\r\n\t\t\t\t\t\tselectedLabels.push(item.textContent);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n                    item.setAttribute('aria-selected', 'false'); // Ensure non-selected items have false\r\n                }\r\n\t\t\t});\r\n\r\n\t\t\tif (valueDisplay) {\r\n\t\t\t\tvalueDisplay.textContent = selectedLabels.length > 0 ? selectedLabels.join(', ') : placeholder;\r\n\t\t\t}\r\n\t\t\tif (hiddenInput) {\r\n\t\t\t\thiddenInput.value = isMultiple ? JSON.stringify(selectedItems) : selectedItems[0] || '';\r\n\t\t\t}\r\n\r\n            // Event listener for the label element\r\n\t\t\tif (labelElement) {\r\n\t\t\t\tlabelElement.addEventListener('click', (event) => {\r\n\t\t\t\t\tevent.preventDefault(); \r\n\t\t\t\t\tevent.stopPropagation(); // Stop propagation to prevent document click from closing\r\n\t\t\t\t\tconsole.log(\"Label clicked for:\", componentId);\r\n\t\t\t\t\tdropdownToggle.click(); // Programmatically click the toggle button\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n             if (valueDisplay) {\r\n                valueDisplay.addEventListener('click', (event) => {\r\n\t\t\t\t\tevent.preventDefault(); \r\n\t\t\t\t\tevent.stopPropagation(); // Stop propagation to prevent document click from closing\r\n\t\t\t\t\tdropdownToggle.click(); // Programmatically click the toggle button\r\n\t\t\t\t});\r\n            }\r\n\r\n\r\n            // Event listener for the dropdown toggle button\r\n\t\t\tif (dropdownToggle) {\r\n\t\t\t\tdropdownToggle.addEventListener('click', (event) => {\r\n\t\t\t\t\tevent.preventDefault();\r\n                    event.stopPropagation(); // Prevent click on button from reaching global listener\r\n\t\t\t\t\tconsole.log(\"Dropdown toggle clicked for:\", componentId);\r\n\t\t\t\t\ttoggleDropdown(dropdownToggle);\r\n\r\n                    // Close other open dropdowns when one opens\r\n                    document.querySelectorAll('.tc-dropdown-toggle').forEach(otherButton => {\r\n                        if (otherButton !== dropdownToggle) {\r\n                            const otherDropdownId = otherButton.getAttribute('aria-controls');\r\n                            const otherDropdownMenu = document.getElementById(otherDropdownId);\r\n                            if (otherDropdownMenu && otherDropdownMenu.classList.contains('show')) {\r\n                                toggleDropdown(otherButton, true); // Force close other dropdowns\r\n                            }\r\n                        }\r\n                    });\r\n\t\t\t\t});\r\n\r\n                // Keyboard Navigation for the Toggle Button\r\n                dropdownToggle.addEventListener('keydown', (event) => {\r\n                    const isExpanded = dropdownToggle.getAttribute('aria-expanded') === 'true';\r\n                    const allOptions = Array.from(selectItems);\r\n                    let currentActiveOptionIndex = -1;\r\n                    const activeDescendantId = dropdownToggle.getAttribute('aria-activedescendant');\r\n                    if (activeDescendantId) {\r\n                        currentActiveOptionIndex = allOptions.findIndex(opt => opt.id === activeDescendantId);\r\n                    }\r\n\r\n                    switch (event.key) {\r\n                        case 'Enter':\r\n                        case ' ': // Space key\r\n                            event.preventDefault(); // Prevent default scroll for space\r\n                            if (!isExpanded) {\r\n                                toggleDropdown(dropdownToggle); // Open\r\n                            } else {\r\n                                // If open and an item is active, select it\r\n                                const activeElement = document.getElementById(activeDescendantId);\r\n                                if (activeElement) {\r\n                                    activeElement.click(); // Simulate click on the active item\r\n                                } else {\r\n                                    toggleDropdown(dropdownToggle); // Close if no item active\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 'ArrowDown':\r\n                        case 'ArrowUp':\r\n                            event.preventDefault(); // Prevent default scroll\r\n                            if (!isExpanded) {\r\n                                toggleDropdown(dropdownToggle); // Open if closed\r\n                                // Set initial active descendant to first/last if opening with arrow\r\n                                if (event.key === 'ArrowDown') {\r\n                                    if (allOptions.length > 0) {\r\n                                        allOptions[0].focus();\r\n                                        dropdownToggle.setAttribute('aria-activedescendant', allOptions[0].id);\r\n                                    }\r\n                                } else { // ArrowUp\r\n                                    if (allOptions.length > 0) {\r\n                                        allOptions[allOptions.length - 1].focus();\r\n                                        dropdownToggle.setAttribute('aria-activedescendant', allOptions[allOptions.length - 1].id);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                // Navigate options\r\n                                let nextIndex = currentActiveOptionIndex;\r\n                                if (event.key === 'ArrowDown') {\r\n                                    nextIndex = (nextIndex + 1) % allOptions.length;\r\n                                } else { // ArrowUp\r\n                                    nextIndex = (nextIndex - 1 + allOptions.length) % allOptions.length;\r\n                                }\r\n\r\n                                if (allOptions[nextIndex]) {\r\n                                    allOptions[nextIndex].focus();\r\n                                    dropdownToggle.setAttribute('aria-activedescendant', allOptions[nextIndex].id);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 'Escape':\r\n                            if (isExpanded) {\r\n                                event.preventDefault();\r\n                                toggleDropdown(dropdownToggle, true); // Force close\r\n                                // Focus returns to button after toggleDropdown\r\n                            }\r\n                            break;\r\n                        case 'Home':\r\n                            if (isExpanded && allOptions.length > 0) {\r\n                                event.preventDefault();\r\n                                allOptions[0].focus();\r\n                                dropdownToggle.setAttribute('aria-activedescendant', allOptions[0].id);\r\n                            }\r\n                            break;\r\n                        case 'End':\r\n                            if (isExpanded && allOptions.length > 0) {\r\n                                event.preventDefault();\r\n                                allOptions[allOptions.length - 1].focus();\r\n                                dropdownToggle.setAttribute('aria-activedescendant', allOptions[allOptions.length - 1].id);\r\n                            }\r\n                            break;\r\n                        // Type-ahead functionality (already handled by search input, but could be added here for pure keyboard nav)\r\n                        default:\r\n                            if (event.key.length === 1 && event.key.match(/[a-z0-9]/i)) { // Single alphanumeric key\r\n                                // If dropdown is closed, open it first\r\n                                if (!isExpanded) {\r\n                                    toggleDropdown(dropdownToggle);\r\n                                }\r\n                                // Trigger search input\r\n                                if (searchInput) {\r\n                                    searchInput.focus();\r\n                                    searchInput.value += event.key; // Append key to search input\r\n                                    const inputEvent = new Event('input', { bubbles: true });\r\n                                    searchInput.dispatchEvent(inputEvent); // Manually trigger input event\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n\t\t\t}\r\n\r\n            // Keyboard Navigation for List Items (Options)\r\n            if (dropdownMenu) { // Attach listener to the menu itself for delegation\r\n                dropdownMenu.addEventListener('keydown', (event) => {\r\n                    const allOptions = Array.from(selectItems);\r\n                    const currentFocusedOption = event.target.closest('[role=\"option\"]');\r\n                    let currentFocusedIndex = -1;\r\n                    if (currentFocusedOption) {\r\n                        currentFocusedIndex = allOptions.indexOf(currentFocusedOption);\r\n                    }\r\n\r\n                    switch (event.key) {\r\n                        case 'ArrowDown':\r\n                        case 'ArrowUp':\r\n                            event.preventDefault(); // Prevent scrolling\r\n                            if (allOptions.length > 0 && currentFocusedIndex !== -1) {\r\n                                let nextIndex;\r\n                                if (event.key === 'ArrowDown') {\r\n                                    nextIndex = (currentFocusedIndex + 1) % allOptions.length;\r\n                                } else { // ArrowUp\r\n                                    nextIndex = (currentFocusedIndex - 1 + allOptions.length) % allOptions.length;\r\n                                }\r\n                                allOptions[nextIndex].focus();\r\n                                dropdownToggle.setAttribute('aria-activedescendant', allOptions[nextIndex].id);\r\n                            }\r\n                            break;\r\n                        case 'Enter':\r\n                        case ' ': // Space key\r\n                            event.preventDefault();\r\n                            if (currentFocusedOption) {\r\n                                currentFocusedOption.click(); // Select the focused option\r\n                                // For single select, click will close it. For multiple, it stays open.\r\n                                if (!isMultiple) {\r\n                                    toggleDropdown(dropdownToggle, true); // Force close for single select\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 'Escape':\r\n                            event.preventDefault();\r\n                            toggleDropdown(dropdownToggle, true); // Force close\r\n                            break;\r\n                        case 'Home':\r\n                            if (allOptions.length > 0) {\r\n                                event.preventDefault();\r\n                                allOptions[0].focus();\r\n                                dropdownToggle.setAttribute('aria-activedescendant', allOptions[0].id);\r\n                            }\r\n                            break;\r\n                        case 'End':\r\n                            if (allOptions.length > 0) {\r\n                                event.preventDefault();\r\n                                allOptions[allOptions.length - 1].focus();\r\n                                dropdownToggle.setAttribute('aria-activedescendant', allOptions[allOptions.length - 1].id);\r\n                            }\r\n                            break;\r\n                        // For type-ahead within the list (optional, can defer to search input)\r\n                        default:\r\n                            if (event.key.length === 1 && event.key.match(/[a-z0-9]/i)) {\r\n                                if (searchInput) {\r\n                                    searchInput.focus();\r\n                                    searchInput.value += event.key;\r\n                                    const inputEvent = new Event('input', { bubbles: true });\r\n                                    searchInput.dispatchEvent(inputEvent);\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Attach listener for search input keydowns (optional, but good for robust type-ahead)\r\n            if (searchInput) {\r\n                searchInput.addEventListener('keydown', (event) => {\r\n                    event.stopPropagation();\r\n                    const isExpanded = dropdownToggle.getAttribute('aria-expanded') === 'true';\r\n                    const allOptions = Array.from(selectItems).filter(item => item.style.display !== 'none'); // Only visible options\r\n                    let currentActiveOptionIndex = -1;\r\n                    const activeDescendantId = dropdownToggle.getAttribute('aria-activedescendant');\r\n                    if (activeDescendantId) {\r\n                        currentActiveOptionIndex = allOptions.findIndex(opt => opt.id === activeDescendantId);\r\n                    }\r\n\r\n                    switch (event.key) {\r\n                        case 'ArrowDown':\r\n                            event.preventDefault();\r\n                            if (allOptions.length > 0) {\r\n                                let nextIndex = (currentActiveOptionIndex + 1) % allOptions.length;\r\n                                allOptions[nextIndex].focus();\r\n                                dropdownToggle.setAttribute('aria-activedescendant', allOptions[nextIndex].id);\r\n                            }\r\n                            break;\r\n                        case 'ArrowUp':\r\n                            event.preventDefault();\r\n                            if (allOptions.length > 0) {\r\n                                let nextIndex = (currentActiveOptionIndex - 1 + allOptions.length) % allOptions.length;\r\n                                allOptions[nextIndex].focus();\r\n                                dropdownToggle.setAttribute('aria-activedescendant', allOptions[nextIndex].id);\r\n                            }\r\n                            break;\r\n                        case 'Enter':\r\n                            event.preventDefault();\r\n                            // Select the currently active item\r\n                            const activeElement = document.getElementById(activeDescendantId);\r\n                            if (activeElement) {\r\n                                activeElement.click();\r\n                                updateValidationState();\r\n                            }\r\n\r\n\r\n                            break;\r\n                        case 'Escape':\r\n                            event.preventDefault();\r\n                            toggleDropdown(dropdownToggle, true); // Force close\r\n                            updateValidationState();\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n\r\n            selectItems.forEach(item => {\r\n                item.addEventListener('click', (event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation(); // Stop propagation from item clicks\r\n\r\n                    const value = item.getAttribute('value');\r\n                    const label = item.textContent;\r\n                    console.log(value)\r\n                    // Update aria-selected state\r\n                    if (isMultiple) {\r\n                        const index = selectedItems.indexOf(value);\r\n                        if (index === -1) {\r\n                            selectedItems.push(value);\r\n                            selectedLabels.push(label);\r\n                            item.classList.add('active');\r\n                            item.setAttribute('aria-selected', 'true');\r\n                        } else {\r\n                            selectedItems.splice(index, 1);\r\n                            selectedLabels.splice(index, 1);\r\n                            item.classList.remove('active');\r\n                            item.setAttribute('aria-selected', 'false');\r\n                        }\r\n\r\n                        valueDisplay.textContent = selectedLabels.length > 0 ? selectedLabels.join(', ') : placeholder;\r\n                    } else { // Single select mode\r\n                        const currentlySelectedValue = hiddenInput.value;\r\n                        console.log(hiddenInput.value)\r\n                        // Deselect previously active item if different from current click\r\n                        Array.from(selectItems).forEach(i => {\r\n                            if (i.classList.contains('active') && i !== item) { // Only deselect others if not the current item\r\n                                i.classList.remove('active');\r\n                                i.setAttribute('aria-selected', 'false');\r\n                            }\r\n                        });\r\n                        \r\n\r\n                        if (currentlySelectedValue === value) {\r\n                            // Deselect if clicking the same item again\r\n                            hiddenInput.value = '';\r\n                            valueDisplay.textContent = placeholder;\r\n                            item.classList.remove('active');\r\n                            item.setAttribute('aria-selected', 'false');\r\n                        } else {\r\n                            // Select new item\r\n                            selectedItems = []\r\n                            selectedItems.push(value);\r\n                            valueDisplay.textContent = label;\r\n                            item.classList.add('active');\r\n                            item.setAttribute('aria-selected', 'true');\r\n                        }\r\n                        toggleDropdown(dropdownToggle, true); // Close dropdown after single selection\r\n                    }\r\n                    hiddenInput.value = isMultiple ? JSON.stringify(selectedItems) : (selectedItems[0] || '');\r\n                    updateValidationState();\r\n                });\r\n\r\n                // Listen for focus on individual options to update aria-activedescendant\r\n                item.addEventListener('focus', () => {\r\n                    dropdownToggle.setAttribute('aria-activedescendant', item.id);\r\n                });\r\n            });\r\n\r\n            if (clearBtn) {\r\n                clearBtn.addEventListener('click', (event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    selectedItems = [];\r\n                    selectedLabels = [];\r\n                    hiddenInput.value = '';\r\n                    valueDisplay.textContent = placeholder;\r\n\r\n                    if (searchInput) {\r\n                        searchInput.value = '';\r\n                        selectItems.forEach(item => item.style.display = '');\r\n                    }\r\n                    selectItems.forEach((item) => {\r\n                        item.classList.remove('active');\r\n                        item.setAttribute('aria-selected', 'false'); // Clear aria-selected\r\n                    });\r\n                    toggleDropdown(dropdownToggle, true); // Close the dropdown after clearing\r\n                    updateValidationState();\r\n                });\r\n            }\r\n\t\t}\r\n\r\n\t\tdocument.addEventListener('DOMContentLoaded', () => {\r\n            if (!window.selectComponentsInitialized) {\r\n                window.selectComponentsInitialized = new Set();\r\n            }\r\n\r\n            const allSelectComponentRoots = document.querySelectorAll('.tc-select');\r\n\r\n            allSelectComponentRoots.forEach(rootEl => {\r\n                const componentId = rootEl.id.replace('-select', '');\r\n\r\n                if (!window.selectComponentsInitialized.has(componentId)) {\r\n                    const isMultiple = rootEl.hasAttribute('multiple');\r\n                    const initialValue = rootEl.getAttribute('initial-value') || '';\r\n                    const placeholderSpan = rootEl.querySelector('.tc-selected-items');\r\n                    const placeholder = placeholderSpan ? placeholderSpan.textContent : 'Select...';\r\n                    const isSearchable = rootEl.querySelector('.tc-select-search') !== null;\r\n\r\n                    initializeSelectComponent(componentId, isMultiple, initialValue, placeholder, isSearchable);\r\n                    window.selectComponentsInitialized.add(componentId);\r\n                }\r\n            });\r\n\r\n            if (!window.globalSelectOutsideClickListenerAttached) {\r\n                document.addEventListener('click', (event) => {\r\n                    allSelectComponentRoots.forEach(rootEl => {\r\n                        const dropdownToggle = rootEl.querySelector('.tc-dropdown-toggle');\r\n                        const dropdownMenu = rootEl.querySelector('.tc-select-content');\r\n                        \r\n                        if (dropdownMenu && dropdownMenu.classList.contains('show')) {\r\n                            if (!rootEl.contains(event.target)) { // Check if click is outside the entire component root\r\n                                toggleDropdown(dropdownToggle, true); // Force close\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n                window.globalSelectOutsideClickListenerAttached = true;\r\n            }\r\n\t\t});\r\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
