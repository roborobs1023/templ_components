package date

import (
	"fmt"
	"github.com/roborobs1023/templ_components/inputs/common"
	"github.com/roborobs1023/templ_components/internal/utils"
	"time"
)

type DateProps struct {
	common.InputProps
	Value   time.Time
	MinDate time.Time
	MaxDate time.Time
}

type DateOptFunc func(p *DateProps)

templ dateInput(p DateProps) {
	@inputs.FormGroup() {
		<label for={ p.ID }>{ p.Label }</label>
		<input
			type="date"
			id={ p.ID }
			name={ p.Name }
			value={ p.Value.Format("2006-01-02") }
			class={ "input input-bordered", p.Classes }
			required?={ p.Required }
			disabled?={ p.Disabled }
			readonly?={ p.Readonly }
			autofocus?={ p.Autofocus }
			min={ p.MinDate.Format("2006-01-02") }
			max={ p.MaxDate.Format("2006-01-02") }
			if p.Tabindex != 0 {
				tabindex={ fmt.Sprintf("%d", p.Tabindex) }
			}
			{ p.Attrs... }
		/>
	}
}

func WithMinDate(t time.Time) DateOptFunc {
	return func(p *DateProps) {
		p.MinDate = t
	}
}

func WithMaxDate(t time.Time) DateOptFunc {
	return func(p *DateProps) {
		p.MaxDate = t
	}
}

func DefaultValue(t time.Time) DateOptFunc {
	return func(p *DateProps) {
		p.Value = t
	}
}

func WithAttrs(attrs templ.Attributes) DateOptFunc {
	return func(p *DateProps) {
		p.InputProps.Attrs = attrs
	}
}

func Required(p *DateProps) {
	p.InputProps.Required = true
}

func Readonly(p *DateProps) {
	p.InputProps.Readonly = true
}

func Disabled(p *DateProps) {
	p.InputProps.Disabled = true
}

func AutoFocus(p *DateProps) {
	p.InputProps.Autofocus = true
}

func TabIndex(index int) DateOptFunc {
	return func(p *DateProps) {
		p.InputProps.Tabindex = index
	}
}

func New(name, label string, opts ...DateOptFunc) templ.Component {
	now := time.Now()
	props := DateProps{InputProps: common.InputProps{ID: utils.NewID(name), Name: name, Label: label}, Value: now, MinDate: time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, now.Location()), MaxDate: inputs.LastDayOfCurrentMonth()}

	for _, fn := range opts {
		fn(&props)
	}

	return dateInput(props)
}
