package inputs

import (
	"fmt"
	"github.com/roborobs1023/templ_components/inputs/common"
)

type PasswordReq struct {
	minLength          int
	uppercase          bool
	lowercase          bool
	digit              bool
	specialChar        bool
	specialCharPattern string
}

type PasswordReqFunc func(r *PasswordReq)

const specialCharPattern = `[!@#$%^&*()_+\-=<>;:?\/\[\]{}\\|~]`

func minPasswordReq() PasswordReq {
	return PasswordReq{
		minLength:          6,
		uppercase:          false,
		lowercase:          false,
		digit:              false,
		specialChar:        false,
		specialCharPattern: specialCharPattern,
	}
}

var DefaultPasswordReq = PasswordReq{
	minLength:          8,
	uppercase:          true,
	lowercase:          true,
	digit:              true,
	specialChar:        true,
	specialCharPattern: specialCharPattern,
}

func SetPassMinLength(min int) PasswordReqFunc {
	return func(r *PassowrdReq) {
		r.minLength = min
	}
}

func Uppercase(r *PasswordReq) {
	r.uppercase = true
}

func Lowercase(r *PasswordReq) {
	r.lowercase = true
}

func Digit(r *PasswordReq) {
	r.digit = true
}

func Special(r *PasswordReq) {
	r.specialChar = true
}

func NewPassReq(opts ...PasswordReqFunc) PasswordReq {
	req := minPasswordReq()

	for _, fn := range opts {
		fn(&req)
	}

	return req
}

templ passwordInput(Attrs templ.Attributes) {
	<label for="password">Password:</label>
	<div class="password-input">
		<input
			id="password"
			type="password"
			name="password"
			required
			aria-required="true"
			autocomplete="current-password"
			aria-autocomplete="current-password"
			{ Attrs... }
		/>
		<button
			type="button"
			class="password-toggle"
			data-tooltip="View Password"
			_="on click if [type of previous <input/>] == 'password' then remove [@type=password] from previous <input/> then hide #eye then remove .hidden from #eye-slash else show #eye then add .hidden to #eye-slash then tell previous <input/> toggle [@type=password] then end"
		>
			<svg id="eye" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
				<path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0"></path>
				<path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7"></path>
			</svg>
			<svg id="eye-slash" class="hidden" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
				<path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7 7 0 0 0 2.79-.588M5.21 3.088A7 7 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474z"></path>
				<path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z"></path>
			</svg>
		</button>
	</div>
}

templ NewPasswordInput(p PasswordReq) {
	@common.NewFormGroup() {
		<label for="new_password">New Password</label>
		<input
			id="new_password"
			class="input input-bordered input-primary bg-slate-800"
			type="password"
			name="password"
			autocomplete="new-password"
			aria-autocomplete="new-password"
			required
			aria-required="true"
			minLength={ fmt.Sprintf("%d", p.minLength) }
		/>
	}
	<div id="error_msg" class="hidden error-msg">
		<p id="minLengthError" class="hidden mt-1 text-sm text-error">Password must be at least { fmt.Sprintf("%d", p.minLength) } characters long.</p>
		if p.uppercase {
			<p id="uppercaseError" class="hidden mt-1 text-sm text-error">Password must contain at least one uppercase letter.</p>
		}
		if p.lowercase {
			<p id="lowercaseError" class="hidden mt-1 text-sm text-error">Password must contain at least one lowercase letter.</p>
		}
		if p.digit {
			<p id="digitError" class="hidden mt-1 text-sm text-error">Password must contain at least one number.</p>
		}
		if p.specialChar {
			<p id="specialCharError" class="hidden mt-1 text-sm text-error">Password must contain at least one special character.</p>
		}
	</div>
	@common.NewFormGroup() {
		<label for="confirm_password">Confirm Password</label>
		<div class="password-input">
			<input
				id="confirm_password"
				class="input input-bordered input-primary bg-slate-800"
				type="password"
				name="confirm_password"
				autocomplete="new-password"
				required
				minLength={ fmt.Sprintf("%d", p.minLength) }
			/>
			<button
				type="button"
				id="toggleConfirmPasswordVisibility"
				class="password-toggle"
				data-tooltip="View Password"
			>
				<svg id="EyeOpen" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
					<path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0"></path>
					<path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7"></path>
				</svg>
				<svg id="EyeClosed" class="hidden" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
					<path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7 7 0 0 0 2.79-.588M5.21 3.088A7 7 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474z"></path>
					<path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z"></path>
				</svg>
			</button>
		</div>
	}
	<p id="passwordMatchError" class="hidden mt-1 text-sm text-error">Passwords must match.</p>
	<script type="text/javascript">
			// Wrap in an IIFE to avoid polluting global scope
			(function() {
				const newPasswordInput = document.getElementById('new_password');
				const confirmPasswordInput = document.getElementById('confirm_password');
				const toggleConfirmPasswordVisibilityBtn = document.getElementById('toggleConfirmPasswordVisibility');

				const ErrorMessages = document.getElementById('error_msg');
				const EyeOpen = document.getElementById('EyeOpen');
				const EyeClosed = document.getElementById('EyeClosed');

				const passwordMatchError = document.getElementById('passwordMatchError');
				const minLengthError = document.getElementById('minLengthError');
				const uppercaseError = document.getElementById('uppercaseError');
				const lowercaseError = document.getElementById('lowercaseError');
				const digitError = document.getElementById('digitError');
				const specialCharError = document.getElementById('specialCharError');
				
				const submitButton = document.getElementById('submitBtn'); 

				// Go-provided constants (interpolated directly by templ)
				const MIN_LENGTH = {{ p.minLength }};
				const HAS_UPPERCASE_REQ = {{ p.uppercase }};
				const HAS_LOWERCASE_REQ = {{ p.lowercase }};
				const HAS_DIGIT_REQ = {{ p.digit }};
				const HAS_SPECIAL_CHAR_REQ = {{ p.specialChar }};
				const SPECIAL_CHAR_PATTERN = {{ p.specialCharPattern }};

				const upperRegex = new RegExp('[A-Z]+');
				const lowerRegex = new RegExp('[a-z]+');
				const digitRegex = new RegExp('[0-9]+');
				const specialCharRegex = SPECIAL_CHAR_PATTERN ? new RegExp(SPECIAL_CHAR_PATTERN) : null;

				function togglePasswordVisibility() {
					if (newPasswordInput.type === 'password') {
						newPasswordInput.type = 'text';
					confirmPasswordInput.type = 'text';
						EyeOpen.classList.add('hidden');
						EyeClosed.classList.remove('hidden');
					} else {
						newPasswordInput.type = 'password';
						confirmPasswordInput.type = 'password';
						EyeOpen.classList.remove('hidden');
						EyeClosed.classList.add('hidden');
					}

					
				}

				function validatePasswords() {
					const newPassword = newPasswordInput.value;
					const confirmPassword = confirmPasswordInput.value;

					let allConditionsMet = true;
					
					if ((newPassword === confirmPassword) || newPassword === "" || confirmPassword === "") {
						passwordMatchError.classList.add('hidden');	
					} else {
						newPasswordInput.classList.add('invalid');
						confirmPasswordInput.classList.add('invalid');
						passwordMatchError.classList.remove('hidden');
						allConditionsMet = false;
					}

					if (newPassword.length >= MIN_LENGTH && !(confirmPassword === "")) {
						minLengthError.classList.add('hidden');
						newPasswordInput.classList.add('invalid');
					} else {
						minLengthError.classList.remove('hidden');
						allConditionsMet = false;
					}

					if (HAS_UPPERCASE_REQ) {
						if (upperRegex.test(newPassword) && !(confirmPassword === "")) {
							uppercaseError.classList.add('hidden');
							newPasswordInput.classList.add('invalid');
						} else {
							uppercaseError.classList.remove('hidden');
							allConditionsMet = false;
						}
					} else if (uppercaseError) { 
						uppercaseError.classList.add('hidden');
						newPasswordInput.classList.add('invalid');
					}

					if (HAS_LOWERCASE_REQ) {
						if (lowerRegex.test(newPassword) && !(confirmPassword === "")) {
							lowercaseError.classList.add('hidden');
							newPasswordInput.classList.add('invalid');
						} else {
							lowercaseError.classList.remove('hidden');
							allConditionsMet = false;
						}
					} else if (lowercaseError && !(confirmPassword === "")) {
						lowercaseError.classList.add('hidden');
					}

					if (HAS_DIGIT_REQ) {
						if (digitRegex.test(newPassword) && !(confirmPassword === "")) {
							digitError.classList.add('hidden');
							newPasswordInput.classList.add('invalid');
						} else {
							digitError.classList.remove('hidden');
							allConditionsMet = false;
						}
					} else if (digitError) {
						digitError.classList.add('hidden');
					}

					if (HAS_SPECIAL_CHAR_REQ) {
						if (specialCharRegex && specialCharRegex.test(newPassword) && !(confirmPassword === "" )) {
							specialCharError.classList.add('hidden');
						} else {
							specialCharError.classList.remove('hidden');
							allConditionsMet = false;
						}
					} else if (specialCharError) {
						specialCharError.classList.add('hidden');
					}

					if (submitButton) {
						submitButton.disabled = !allConditionsMet;
					}

					if (!allConditionsMet) {
						ErrorMessages.classList.remove('hidden');
					} else {
						ErrorMessages.classList.add('hidden');
						newPasswordInput.classList.remove('invalid');
						confirmPasswordInput.classList.remove('invalid');
					}
				}

				newPasswordInput.addEventListener('input', validatePasswords);
				confirmPasswordInput.addEventListener('input', validatePasswords);
				confirmPasswordInput.addEventListener('blur', validatePasswords); 

				toggleConfirmPasswordVisibilityBtn.addEventListener('click', () => {
					togglePasswordVisibility();
					
				});

				
			})(); 
		</script>
}
