package generator

import (
	"bufio"
	"encoding/json"
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/roborobs1023/templ_components/internal/utils"
)

type Theme struct {
	Colors     ColorPalette `tc-config:"colors"`
	FontFamily string       `tc-config:"font-family"`
	FontWeight int          `tc-config:"font-weight"`
}

type CSSPropertyMap map[string]string

type ColorPalette map[string]string

var baseCfg = Config{
	DefaultTheme:                "light",
	AutoGenerateSystemDarkTheme: utils.BoolPtr(true),
	Themes: map[string]Theme{
		"light": {
			FontFamily: "'Inter', sans-serif", // Default font family for the light theme
			FontWeight: 400,
			Colors: ColorPalette{
				"primary":    "#007bff",
				"secondary":  "#6c757d",
				"success":    "#28a745",
				"danger":     "#dc3545",
				"warning":    "#ffc107",
				"info":       "#17a2b8",
				"background": "#f8f9fa", // Renamed 'light' for clarity in usage
				"text":       "#343a40", // Renamed 'dark' for clarity in usage
				"white":      "#ffffff",
				"black":      "#000000",
			},
		},
	},
	Breakpoints: map[string]string{
		"sm":  "640px",
		"md":  "768px",
		"lg":  "1024px",
		"xl":  "1280px",
		"xxl": "1536px",
	},
}

type Config struct {
	DefaultTheme                string            `tc-config:"default-theme"`
	AutoGenerateSystemDarkTheme *bool             `tc-config:"generateDarkTheme"`
	Themes                      map[string]Theme  `tc-config:"themes"`
	Breakpoints                 map[string]string `tc-config:"breakpoints"`
}

func LoadConfig() (Config, error) {
	filePath := "themes.json"
	file, err := os.ReadFile(filePath)
	if err != nil {
		return baseCfg, fmt.Errorf("failed to read config file '%s': %w. Using base config", filePath, err)
	}

	var config Config
	err = json.Unmarshal(file, &config)
	if err != nil {
		return baseCfg, fmt.Errorf("failed to unmarshal config JSON from '%s': %w. Using base config", filePath, err)
	}

	config = mergeConfigs(config)
	return config, nil
}

func mergeConfigs(overrideCfg Config) Config {
	mergedCfg := overrideCfg

	if mergedCfg.DefaultTheme == "" {
		mergedCfg.DefaultTheme = baseCfg.DefaultTheme
	}

	// Check if imported config omitted AutoGenerateSystemDarkTheme.
	if mergedCfg.AutoGenerateSystemDarkTheme == nil {
		mergedCfg.AutoGenerateSystemDarkTheme = baseCfg.AutoGenerateSystemDarkTheme
	}

	// Themes are NOT merged.
	if len(mergedCfg.Themes) == 0 {
		mergedCfg.Themes = baseCfg.Themes
	}

	return mergedCfg
}

type CSSBuilder struct {
	Output *strings.Builder
	Config Config
}

type status string

const (
	STATFOUND    status = "found"
	STATCANCELED status = "canceled"
	STATGENERATE status = "generate"
	STATUPDATE   status = "update"
	STATFAILED   status = "update failed"
	STATSUCCESS  status = "success"
)

func GetCSSStatus(dir string, update ...bool) status {
	_, err := os.Stat(filepath.Join(dir, "tc-styles.css"))
	if err != nil && errors.Is(err, os.ErrNotExist) {
		return STATGENERATE
	}

	if len(update) > 0 {
		return STATUPDATE
	}

	return STATFOUND

}

func NewGenerator(cfg Config) *CSSBuilder {
	return &CSSBuilder{Output: &strings.Builder{}, Config: cfg}
}

func (cg *CSSBuilder) generate() error {

	cg.Output.WriteString("/* Generated By: Templ Components Framework, DO NOT EDIT! */\n\n")
	cg.Output.WriteString("/* Default Theme Variables */\n")
	cg.Output.WriteString(":root {\n")
	cg.generateThemeVariables()
	cg.Output.WriteString("}\n\n")

	return nil
}

type GeneratorProps struct {
	OutputDir string
	Force     bool
	Update    bool
}

var cssDir = "web/assets/css"

func SetCSSDir(dir string) {
	cssDir = dir
}

func (cg *CSSBuilder) Build(p GeneratorProps) (status, error) {

	if p.OutputDir != "" {
		cssDir = p.OutputDir
	}

	outputPath := filepath.Join(cssDir, "tc-styles.css")

	if err := utils.EnsureDirectoryExists(cssDir); err != nil {
		return STATFAILED, fmt.Errorf("failed to create output directory: %v, error: %v", cssDir, err)
	}

	_, err := os.Stat(outputPath)
	if err == nil {
		fmt.Printf("File '%s' already exists. Do you want to overwrite it? (yes/no): ", outputPath)
		if !p.Force {
			scanner := bufio.NewScanner(os.Stdin)
			scanner.Scan()
			if strings.ToLower(strings.TrimSpace(scanner.Text())) != "yes" && strings.ToLower(strings.TrimSpace(scanner.Text())) != "y" {
				fmt.Println("File not overwritten. Operation cancelled by user.")
				return STATCANCELED, nil
			}

		}
	} else if !os.IsNotExist(err) {
		return STATFAILED, fmt.Errorf("error checking file status %s: %w", outputPath, err)
	}
	err = cg.generate()

	if err != nil {
		return STATFAILED, fmt.Errorf("failed to generate CSS: %w", err)
	}

	file, err := os.OpenFile(outputPath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return STATFAILED, fmt.Errorf("failed to open file %s for writing: %w", outputPath, err)
	}
	defer file.Close()
	_, err = file.WriteString(cg.Output.String())
	if err != nil {
		return STATFAILED, fmt.Errorf("failed to write content to file %s: %w", outputPath, err)
	}
	return STATSUCCESS, nil
}

func (cg *CSSBuilder) generateThemeVariables() {
	defTheme := cg.Config.Themes[cg.Config.DefaultTheme]
	for name, value := range defTheme.Colors {
		fmt.Fprintf(cg.Output, "  --color-%s: %s;\n", name, value)

	}
	fmt.Fprintf(cg.Output, "  --font-family: %s;\n", defTheme.FontFamily)
}

func (cg *CSSBuilder) generateBreakpointUtilities() {
	for bp, value := range cg.Config.Breakpoints {
		fmt.Fprintf(cg.Output, "@media (min-width: %v){\n", value)
		cg.GenerateSpacingUtilityClasses(bp)
		cg.Output.WriteString("}\n\n")
	}
}

func propertyMap(maxCount int) CSSPropertyMap {
	m := CSSPropertyMap{}

	for i := 0; i <= maxCount; i++ {
		iStr := strconv.Itoa(i)
		negIStr := fmt.Sprintf("[-%s]", iStr)
		val := float64(i) * .25

		valStr := strconv.FormatFloat(val, 'f', 3, 64) + "rem"
		negValStr := "-" + valStr
		m[iStr] = valStr
		m[negIStr] = negValStr
	}
	m["auto"] = "auto"
	m["px"] = "px"

	return m
}

type SizeProperty string

const (
	PADDING SizeProperty = "padding"
	MARGIN  SizeProperty = "margin"
)

func (s SizeProperty) String() string {
	return string(s)
}

func spacingMap() CSSPropertyMap {
	m := CSSPropertyMap{}
	m["0"] = "0"
	for i := 0; i <= 13; i++ {
		if i <= 12 {
			val := float64(i) * .25

			valStr := strconv.FormatFloat(val, 'f', 3, 64) + "rem"
			negValStr := "-" + valStr
			m[fmt.Sprintf("%v", i)] = valStr
			m[fmt.Sprintf("-%v", i)] = negValStr
			continue
		}
		val := float64(14) * .25

		valStr := strconv.FormatFloat(val, 'f', 3, 64) + "rem"
		negValStr := "-" + valStr
		m[fmt.Sprintf("%v", 14)] = valStr
		m[fmt.Sprintf("-%v", 14)] = negValStr

	}

	for i := 16; i < 64; i += 4 {
		val := float64(i) * .25

		valStr := strconv.FormatFloat(val, 'f', 3, 64) + "rem"
		negValStr := "-" + valStr
		m[fmt.Sprintf("%v", i)] = valStr
		m[fmt.Sprintf("-%v", i)] = negValStr
	}

	m["0\\.5"] = "0.125rem"
	m["1\\.5"] = "0.375rem"
	m["2\\.5"] = "0.625rem"
	m["3\\.5"] = "0.875rem"
	m["-0\\.5"] = "0.125rem"
	m["-1\\.5"] = "0.375rem"
	m["-2\\.5"] = "0.625rem"
	m["-3\\.5"] = "0.875rem"
	m["auto"] = "auto"
	m["px"] = "px"
	return m

}
